points=[(10,41,23),(22,30,29),(11,42,5),(20,32,4),(12,40,12),(21,36,23)]
points
#from statistics import mean, stdev
from typing import Iterable,Tuple
from collections import defaultdict
from pprint import pprint
from math import fsum,hypot,sqrt
from functools import partial

Point = Tuple[int,...]

def mean(data: Iterable[float]) -> float:
    'Accurate arithmentic mean'
    data = list(data)
    return fsum(data) / len(data)

def dist(p: Point,q: Point,fsum=fsum,sqrt=sqrt,zip=zip) -> float:
    'Euclidean distance fn for multi-dim data'
    return sqrt(fsum([(x - y)**2 for x,y in zip(p,q)]))

def assign_data(centroid,data):
    d = defaultdict(list)
    for point in data:
        closest_centroid = min(centroids,key=partial(dist,point))
        d[closest_centroid].append(point)
        
    return d

def compute_centroids(groups):
    'Compute the centroid of each group'
    return [tuple(map(mean,zip(*group))) for group in groups]
    
    
    
    
   ##################################################################################################################################################################
   for point in points:
    print(point,dist(point,(9,39,20)))
    
    #from dis import dis
    #dis(dist)
    
    centroids = [(9,39,20),(12,36,25)]
point=(11,42,5)
print([dist(point,centroid) for centroid in centroids])
print(min([dist(point,centroid) for centroid in centroids]))
#min(centroids,key=lambda centroid: dist(point,centroid))
min(centroids,key=partial(dist,point))

pprint(assign_data(centroids,points),width=45)

groups=[
    [(10, 41, 23), (11, 42, 5), (20, 32, 4),(12, 40, 12)], 
        [(22, 30, 29), (21, 36, 23)]
      ]
group = [(10, 41, 23), (11, 42, 5), (20, 32, 4),(12, 40, 12)]

list(zip(*group))
list(map(mean,zip(*group)))
tuple(map(mean,zip(*group)))
[tuple(map(mean,zip(*group))) for group in groups]

